# -*- coding: utf-8 -*-
"""Vis_Transformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v_H7L2TX_SEftdIHVgZjBH2rHrnoci9H
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

class Tokenizer(nn.Module):
    def __init__(self, L, CT, C, head=16, groups=16, dynamic=False):
        # CT = num_channels previous Tokenizer(starts from 2)
        super(Tokenizer, self).__init__()
        if not dynamic:
            # use static weights to compute token coefficients .
            self.conv_token_coef = nn.Conv2d(C, L, kernel_size=1)
        else:
            # use previous tokens to compute a query weight , which is
            # then used to compute token coefficients .
            self.conv_query = nn.Conv1d(CT, C, kernel_size=1)
            self.conv_key = nn.Conv2d(C, C, groups=groups, kernel_size=1)

        self.conv_value = nn.Sequential(
                                nn.Conv2d(C, C, groups=groups, kernel_size=1),
                                nn.BatchNorm2d(C),
                                nn.ReLU()
                                       )
        self.conv_token = nn.Sequential(
                                        nn.Conv1d(C, CT, kernel_size=1),
                                        nn.BatchNorm1d(CT),
                                        nn.ReLU()
                                        )

        self.head = head
        self.dynamic = dynamic
        

    def forward(self, feature, token=None):
        # compute token coefficients
        # feature : N, C, H, W, token : N, CT , L
        if not self.dynamic:
            token_coef = self.conv_token_coef(feature)  # N, L, H, W
            N, L, H, W = token_coef.shape
            token_coef = token_coef.view(N, 1, L, H * W)
            token_coef = token_coef.permute(0, 1, 3, 2)  # N, 1 , HW , L
            token_coef = token_coef / np.sqrt(feature.shape[1])
        else:
            L = token.shape[2]
            # Split input tokens
            # T_a , T_b: N, CT , L // 2
            T_a, T_b = token[:, :, : L // 2], token[:, :, L // 2:]           
            query = self.conv_query(T_a)
            N, C, L_a = query.shape
            # N, h, C//h, L_a
            query = query.view(N, self.head, C // self.head, L_a)
            N, C, H, W = feature.shape
            key = self.conv_key(feature).view(
                N, self.head, C // self.head, H * W)  # N, h, C // h, HW
            # Compute token coefficients .
            # N, h, HW , L_a
            token_coef = torch.matmul(key.permute(0, 1, 3, 2), query) 
            token_coef = token_coef / np.sqrt(C / self.head)

        N, C, H, W = feature.shape
        token_coef = F.softmax(token_coef, dim=2) # N, h, HW, L
        value = self.conv_value(feature).view(
            N, self.head, C // self.head, H * W)  # N, h, C // h, HW

        # extract tokens from the feature map
        # static tokens : N, C, L. dynamic tokens : N, C, L_a
        ### ((N, h, C // h, HW), N, h, HW, L) -> (N, h, C // h, L) -> (N, C, L)
        tokens = torch.matmul(value, token_coef,).view(N, C, -1)
        
        # compute position encoding
        # if static : pos_encoding : N, Cp , L else : N, Cp , L_a
        # pos_encoding = self.pos_encoding(token_coef, (H, W))
        # tokens = torch.cat((tokens, pos_encoding), dim=1)

        if not self.dynamic:
            # N, C+Cp , L -> N, CT , L ### N, C , L -> N, CT , L
            tokens = self.conv_token(tokens)
        else:
            # N, C+Cp , L_a -> N, CT , L_a , then cat to N, CT , (L_a + L_b ) ### N, C , L_a -> N, CT , L_a , then cat to N, CT , (L_a + L_b )
            tokens = torch.cat((T_b, self.conv_token(tokens)), dim=2)
        return tokens

class ViTransformer(nn.Module):
    def __init__(self, CT, head, kqv_groups):
        super(ViTransformer, self).__init__()

        self.k_conv = nn.Conv1d(CT, CT // 2, groups=kqv_groups, kernel_size=1)
        self.q_conv = nn.Conv1d(CT, CT // 2, groups=kqv_groups, kernel_size=1)
        self.v_conv = nn.Conv1d(CT, CT, groups=kqv_groups, kernel_size=1)

        self.ff_conv = nn.Sequential(
                                    nn.Conv1d(CT, CT, groups=kqv_groups, 
                                              kernel_size=1),
                                    nn.BatchNorm1d(CT),
                                    nn.ReLU()
                                    )
        self.head = head
        self.CT = CT

    def forward(self, tokens):
        N = tokens.shape[0]
        # k: N, h, CT //2//h, L
        k = self.k_conv(tokens).view(
                                N, self.head, self.CT // 2 // self.head, -1)
        # q: N, h, CT //2//h, L
        q = self.q_conv(tokens).view(
                                N, self.head, self.CT // 2 // self.head, -1)
        # v: N, h, CT //h, L
        v = self.v_conv(tokens).view(
                                N, self.head, self.CT // self.head, -1)
        ### (N, h, L, CT //2//h) * (N, h, CT //2//h, L) -> (N, h, L, L)  
        kq = torch.matmul(k.permute(0, 1, 3, 2), q)
        kq = F.softmax(kq / np.sqrt(kq.shape[2]), dim=2) 
        # print(v.shape, kq.shape) #torch.Size([N, h, 9, 8]) torch.Size([N, h, 9, 9])

        ### (N, h, CT //h, L) * (N, h, L, L) -> (N, h, CT //h, L) -> (N, CT , L)
        kqv = torch.matmul(v, kq).view(N, self.CT, -1)
        tokens = tokens + kqv
        tokens = tokens + self.ff_conv(tokens)
        return tokens

class Projector(nn.Module):
    def __init__(self, CT, C, head, groups, dropout):
        super(Projector, self).__init__()
        
        self.drop = nn.Dropout(dropout)
        self.proj_value_conv = nn.Conv1d(CT, C, kernel_size=1)
        self.proj_key_conv = nn.Conv1d(CT, C, kernel_size=1)

        self.proj_query_conv = nn.Sequential(
                                             nn.Conv2d(C, C, groups=groups, 
                                                      kernel_size=1),
                                             nn.BatchNorm2d(C),
                                             nn.ReLU()
                                             )
        self.head = head


    def forward(self, feature, token):
        N, _, L = token.shape 
        h = self.head                                                    
        ### proj_v : (N, h, C //h, L)                                               
        proj_v = self.proj_value_conv(token).view(N, h, -1, L)  
        ### proj_k : (N, h, C //h, L)            
        proj_k = self.proj_key_conv(token).view(N, h, -1, L)  
        proj_q = self.proj_query_conv(feature) ### (N, C, H, W)
        N, C, H, W = proj_q.shape                                        
        proj_q = proj_q.view(N, h, C // h, H * W).permute(0, 1, 3, 2)
        ### (N, h, H * W, C // h) * (N, h, C //h, L) -> (N, h, HW , L)
        # print(proj_q.shape, proj_k.shape, proj_v.shape)
        proj_coef = F.softmax(torch.matmul(proj_q, proj_k) / np.sqrt(C / h), dim=3)
        ### (N, h, C //h, L) * (N, h, L, HW) -> (N, h, C // h, HW)
        proj = torch.matmul(proj_v, proj_coef.permute(0, 1, 3, 2))

        _, _, H, W = feature.shape
        feature = F.relu(self.drop(feature))
        return feature + proj.view(N, -1, H, W)

class One_layerTransformer(nn.Module):
    def __init__(self, L, CT, C, head, groups, dynamic=False, dropout=0.5):
        super().__init__()
        self.dynamic = dynamic

        self.tokenizer = Tokenizer(
                                   L, CT, C, 
                                   head=head, 
                                   groups=groups, 
                                   dynamic=dynamic                 
                                   ) 
        self.trans = ViTransformer(CT, head=head, kqv_groups=groups // 2)
        self.proj = Projector(CT, C, head=head, groups=groups, dropout=dropout) 

    def forward(self, inp, prev_tokens=None):
        tokens = self.tokenizer(inp, prev_tokens)
        tokens = self.trans(tokens)
        feature = self.proj(inp, tokens)
        return feature, tokens